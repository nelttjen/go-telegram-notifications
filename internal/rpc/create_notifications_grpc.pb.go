// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	AddNotificationsToQueue(ctx context.Context, in *AddNotificationsToQueueRequest, opts ...grpc.CallOption) (*AddNotificationsToQueueResponse, error)
	GetTelegramNotificationStatistics(ctx context.Context, in *GetTelegramNotificationStatisticsRequest, opts ...grpc.CallOption) (*GetTelegramNotificationStatisticsResponse, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) AddNotificationsToQueue(ctx context.Context, in *AddNotificationsToQueueRequest, opts ...grpc.CallOption) (*AddNotificationsToQueueResponse, error) {
	out := new(AddNotificationsToQueueResponse)
	err := c.cc.Invoke(ctx, "/internal.rpc.NotificationsService/AddNotificationsToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetTelegramNotificationStatistics(ctx context.Context, in *GetTelegramNotificationStatisticsRequest, opts ...grpc.CallOption) (*GetTelegramNotificationStatisticsResponse, error) {
	out := new(GetTelegramNotificationStatisticsResponse)
	err := c.cc.Invoke(ctx, "/internal.rpc.NotificationsService/GetTelegramNotificationStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
// All implementations must embed UnimplementedNotificationsServiceServer
// for forward compatibility
type NotificationsServiceServer interface {
	AddNotificationsToQueue(context.Context, *AddNotificationsToQueueRequest) (*AddNotificationsToQueueResponse, error)
	GetTelegramNotificationStatistics(context.Context, *GetTelegramNotificationStatisticsRequest) (*GetTelegramNotificationStatisticsResponse, error)
	mustEmbedUnimplementedNotificationsServiceServer()
}

// UnimplementedNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (UnimplementedNotificationsServiceServer) AddNotificationsToQueue(context.Context, *AddNotificationsToQueueRequest) (*AddNotificationsToQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotificationsToQueue not implemented")
}
func (UnimplementedNotificationsServiceServer) GetTelegramNotificationStatistics(context.Context, *GetTelegramNotificationStatisticsRequest) (*GetTelegramNotificationStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramNotificationStatistics not implemented")
}
func (UnimplementedNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {}

// UnsafeNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceServer will
// result in compilation errors.
type UnsafeNotificationsServiceServer interface {
	mustEmbedUnimplementedNotificationsServiceServer()
}

func RegisterNotificationsServiceServer(s grpc.ServiceRegistrar, srv NotificationsServiceServer) {
	s.RegisterService(&NotificationsService_ServiceDesc, srv)
}

func _NotificationsService_AddNotificationsToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationsToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).AddNotificationsToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.rpc.NotificationsService/AddNotificationsToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).AddNotificationsToQueue(ctx, req.(*AddNotificationsToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetTelegramNotificationStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelegramNotificationStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetTelegramNotificationStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.rpc.NotificationsService/GetTelegramNotificationStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetTelegramNotificationStatistics(ctx, req.(*GetTelegramNotificationStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationsService_ServiceDesc is the grpc.ServiceDesc for NotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.rpc.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNotificationsToQueue",
			Handler:    _NotificationsService_AddNotificationsToQueue_Handler,
		},
		{
			MethodName: "GetTelegramNotificationStatistics",
			Handler:    _NotificationsService_GetTelegramNotificationStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "create_notifications.proto",
}
